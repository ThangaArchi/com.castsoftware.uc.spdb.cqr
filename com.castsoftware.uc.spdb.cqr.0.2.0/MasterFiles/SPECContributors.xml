<?xml version='1.0' encoding='utf-8'?>
<root>

<metric id="61024" type="technical-criterion" originalName="Programming Practices - Structuredness" contributorId="2004002" contributorType="quality-rule" contributorOriginalName="Initialize the variable while defining it" critical="true" weight="6"/>

<metric id="61024" type="technical-criterion" originalName="Programming Practices - Structuredness" contributorId="2004004" contributorType="quality-rule" contributorOriginalName="Avoid return Pointer, because memory exists and is destroyed automatically at the end of the function body" critical="true" weight="6"/>

<metric id="61024" type="technical-criterion" originalName="Programming Practices - Structuredness" contributorId="2004006" contributorType="quality-rule" contributorOriginalName="Once memory is applied with malloc, it should be immediately checked whether the pointer value is NULL" critical="true" weight="6"/>

<metric id="61024" type="technical-criterion" originalName="Programming Practices - Structuredness" contributorId="2004008" contributorType="quality-rule" contributorOriginalName="Set the pointer to NULL immediately after freeing memory with free to prevent 'Wild Pointers'" critical="true" weight="6"/>





<metric id="61024" type="technical-criterion" originalName="Programming Practices - Structuredness" contributorId="2004010" contributorType="quality-rule" contributorOriginalName="Boolean variables can not be compared directly to true, false, or 1, 0" critical="true" weight="6"/>

<metric id="61024" type="technical-criterion" originalName="Programming Practices - Structuredness" contributorId="2004012" contributorType="quality-rule" contributorOriginalName="Integer variables should use  '==' or '!=' for directly comparing to 0" critical="true" weight="6"/>

<metric id="61024" type="technical-criterion" originalName="Programming Practices - Structuredness" contributorId="2004014" contributorType="quality-rule" contributorOriginalName="Floating point variables can not compare to any number with an '==' or '!='" critical="true" weight="6"/>

<metric id="61024" type="technical-criterion" originalName="Programming Practices - Structuredness" contributorId="2004016" contributorType="quality-rule" contributorOriginalName="Pointer variables should use '==' or '!=' compared with NULL" critical="true" weight="6"/>

<metric id="61024" type="technical-criterion" originalName="Programming Practices - Structuredness" contributorId="2004018" contributorType="quality-rule" contributorOriginalName="Do not access freed memory" critical="true" weight="6"/>

<metric id="61024" type="technical-criterion" originalName="Programming Practices - Structuredness" contributorId="2004020" contributorType="quality-rule" contributorOriginalName="Each case branch of the switch statement should have comments" critical="true" weight="6"/>

<metric id="61024" type="technical-criterion" originalName="Programming Practices - Structuredness" contributorId="2004022" contributorType="quality-rule" contributorOriginalName="Security code to consider guarding against Possibility of SQL injection vulnerabilities" critical="true" weight="6"/>

<metric id="61024" type="technical-criterion" originalName="Programming Practices - Structuredness" contributorId="2004024" contributorType="quality-rule" contributorOriginalName="Avoid converting a pointer to a non-pointer type or vice versa" critical="true" weight="6"/>




<metric id="61024" type="technical-criterion" originalName="Programming Practices - Structuredness" contributorId="2004026" contributorType="quality-rule" contributorOriginalName="Ensure that file handler/pointer will be closed as soon as they are no longer needed" critical="true" weight="6"/>

<metric id="61024" type="technical-criterion" originalName="Programming Practices - Structuredness" contributorId="2004028" contributorType="quality-rule" contributorOriginalName="Close and release file handle, heap memory, database cursor and other system resources in time to avoid system resource exhaustion attack" critical="true" weight="6"/>

<metric id="61024" type="technical-criterion" originalName="Programming Practices - Structuredness" contributorId="2004030" contributorType="quality-rule" contributorOriginalName="Avoid array or pointer indices that cross boundaries" critical="true" weight="6"/>

<metric id="61024" type="technical-criterion" originalName="Programming Practices - Structuredness" contributorId="2004032" contributorType="quality-rule" contributorOriginalName="To prevent duplicate references to header files; #ifndef/#define/#endif structure should be used to create preprocessing blocks" critical="true" weight="6"/>

<metric id="61024" type="technical-criterion" originalName="Programming Practices - Structuredness" contributorId="2004034" contributorType="quality-rule" contributorOriginalName="Dynamic memory requests and releases must be matched to prevent memory leaks" critical="true" weight="6"/>


</root>