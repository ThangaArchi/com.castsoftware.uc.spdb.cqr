<?xml version='1.0' encoding='utf-8'?>
<root>
	<!-- 2004002 :: Initialize the variable while defining it  -->
	<metric id="2004002" type="quality-rule" originalName="Initialize the variable while defining it" section="name">
	    <english>Initialize the variable while defining it</english>
	</metric>
	<metric id="2004002" type="quality-rule" originalName="Initialize the variable while defining it" section="rationale">
	    <english>Variables are defined but it is not initialized with temporary / default values</english>
	</metric>
	<metric id="2004002" type="quality-rule" originalName="Initialize the variable while defining its" section="description">
	    <english>Un-itialized variables may contain junk data with the contents of stack memory before the function was invoked. So An attacker can sometimes control or read these contents. In other languages or conditions, a variable that is not explicitly initialized can be given a default value that has security implications, depending on the logic of the program. The presence of an uninitialized variable can sometimes indicate a typographic error in the code.</english>
	</metric>
	<metric id="2004002" type="quality-rule" originalName="Initialize the variable while defining it" section="remediation">
	    <english>All the variables must be initialized while defining it</english>
	</metric>
	
	<metric id="2004002" type="quality-rule" originalName="Initialize the variable while defining it" section="remediationSample">
	    <english>Initialize the variable while defining it.
	    For example define the variable and initialize like below:
	    	===> int a = 100
	    </english>
	</metric>
	
	<metric id="2004002" type="quality-rule" originalName="Initialize the variable while defining it" section="sample">
	    <english>Sample: int x = 500</english>
	</metric>
	
	<metric id="2004002" type="quality-rule" originalName="Initialize the variable while defining it" section="output">
	    <english>Security, Architectural, improper behavior of the program can be avoided</english>
    </metric>
    <metric id="2004002" type="quality-rule" originalName="Initialize the variable while defining it" section="associatedValueName">
	    <english>Asoociated Values: Initialize the variable while defining it</english>
	</metric>
	 <metric id="2004002" type="quality-rule" originalName="Initialize the variable while defining it" section="total">
		<english>The total procedure counts Components Access.</english>
	 </metric>
	 
	 
	 
	 
	 
	 








	<!-- 2004004 :: Avoid return Pointer, because memory exists and is destroyed automatically at the end of the function body  -->
	<metric id="2004004" type="quality-rule" originalName="Avoid return Pointer, because memory exists and is destroyed automatically at the end of the function body" section="name">
	    <english>Avoid return Pointer, because memory exists and is destroyed automatically at the end of the function body</english>
	</metric>
	
	<metric id="2004004" type="quality-rule" originalName="Avoid return Pointer, because memory exists and is destroyed automatically at the end of the function body" section="rationale">
	    <english>This check detects anytime the memory for a stack variable declared in a function is accessed after that function returns. Attempting to access stack memory after a function return can result in a crash or other unpredictable behavior.</english>
	</metric>
	
	<metric id="2004004" type="quality-rule" originalName="Avoid return Pointer, because memory exists and is destroyed automatically at the end of the function body" section="description">
	    <english>This check detects anytime the memory for a stack variable declared in a function is accessed after that function returns. Attempting to access stack memory after a function return can result in a crash or other unpredictable behavior.</english>
	</metric>
	
	<metric id="2004004" type="quality-rule" originalName="Avoid return Pointer, because memory exists and is destroyed automatically at the end of the function body" section="remediation">
	    <english>Avoid return Pointer, because memory exists and is destroyed automatically at the end of the function body</english>
	</metric>
	
	<metric id="2004004" type="quality-rule" originalName="Avoid return Pointer, because memory exists and is destroyed automatically at the end of the function body" section="remediationSample">
	    <english>Avoid return Pointer, because memory exists and is destroyed automatically at the end of the function body fixed.</english>
	</metric>
	
	<metric id="2004004" type="quality-rule" originalName="Avoid return Pointer, because memory exists and is destroyed automatically at the end of the function body" section="sample">
	    <english>Avoid return Pointer, because memory exists and is destroyed automatically at the end of the function body</english>
	</metric>
	
	<metric id="2004004" type="quality-rule" originalName="Avoid return Pointer, because memory exists and is destroyed automatically at the end of the function body" section="output">
	    <english>Avoid return Pointer, because memory exists and is destroyed automatically at the end of the function body</english>
    </metric>
	
    <metric id="2004004" type="quality-rule" originalName="Avoid return Pointer, because memory exists and is destroyed automatically at the end of the function body" section="associatedValueName">
	    <english>Avoid return Pointer, because memory exists and is destroyed automatically at the end of the function body</english>
	</metric>
	
	 <metric id="2004004" type="quality-rule" originalName="Avoid return Pointer, because memory exists and is destroyed automatically at the end of the function body" section="total">
		<english>Number of pointers and it's memory allocation</english>
	 </metric>

	 
	 


	<!-- 2004006 :: Once memory is applied with malloc, it should be immediately checked whether the pointer value is NULL -->
	<metric id="2004006" type="quality-rule" originalName="Once memory is applied with malloc, it should be immediately checked whether the pointer value is NULL" section="name">
	    <english>Once memory is applied with malloc, it should be immediately checked whether the pointer value is NULL</english>
	</metric>
	
	<metric id="2004006" type="quality-rule" originalName="Once memory is applied with malloc, it should be immediately checked whether the pointer value is NULL" section="rationale">
	    <english>Unfortunately, many programmers are careless about checking of pointers, and sometimes they deliberately do not check whether to memory was allocated or not. 
	    It  does not guarantee that there will be enough of physical memory, when we begin to use the allocated memory buffer. 
	    Therefore, if there are still no guarantees, it is not necessary to perform a check.
	    
		
	    </english>
	</metric>
	
	<metric id="2004006" type="quality-rule" originalName="Once memory is applied with malloc, it should be immediately checked whether the pointer value is NULL" section="description">
	    <english>If the malloc function is unable to allocate the memory buffer, it returns NULL. 
	    Any normal program should check the pointers which the malloc function returns and properly handle the situation when the memory allocation failed.
	    </english>
	</metric>
	
	<metric id="2004006" type="quality-rule" originalName="Once memory is applied with malloc, it should be immediately checked whether the pointer value is NULL" section="remediation">
	    <english>Once memory is applied with malloc, it should be immediately checked whether the pointer value is NULL
	    
			    &lt;a href=&quot;https://cwe.mitre.org/data/definitions/690.html&quot;&gt;CWE-690: Unchecked Return Value to NULL Pointer Dereference&lt;/a&gt;
	    
	    	    &lt;a href=&quot;https://cwe.mitre.org/data/definitions/252.html&quot;&gt;CWE-252: Unchecked Return Value&lt;/a&gt;
	    
	    		&lt;a href=&quot;https://cwe.mitre.org/data/definitions/476.html&quot;&gt;CWE-476: NULL Pointer Dereference&lt;/a&gt;
	    </english>
	</metric>
	
	<metric id="2004006" type="quality-rule" originalName="Once memory is applied with malloc, it should be immediately checked whether the pointer value is NULL" section="remediationSample">
	    <english>
	    Once memory is applied with malloc, it should be immediately checked whether the pointer value is NULL fixed.
	    	 int *piBuffer = NULL; 
	    	 
	    	 //creating integer of size n. 
	    	 piBuffer = (int*) malloc(20); 
	    	 
	    	 //make sure pcBuffer is valid or not with NULL, before using every where &amp; each time 
	    	 if ( piBuffer == NULL ) { 
	    	 	// piBuffer is NULL, be alert. 
	    	 } else {
				// piBuffer can be used for any business logic here. 
	    	 } 
		</english>
	</metric>
	
	<metric id="2004006" type="quality-rule" originalName="Once memory is applied with malloc, it should be immediately checked whether the pointer value is NULL" section="sample">
	    <english>Once memory is applied with malloc, it should be immediately checked whether the pointer value is NULL
			    &lt;a href=&quot;https://cwe.mitre.org/data/definitions/690.html&quot;&gt;CWE-690: Unchecked Return Value to NULL Pointer Dereference&lt;/a&gt;
	    
	    	    &lt;a href=&quot;https://cwe.mitre.org/data/definitions/252.html&quot;&gt;CWE-252: Unchecked Return Value&lt;/a&gt;
	    
	    		&lt;a href=&quot;https://cwe.mitre.org/data/definitions/476.html&quot;&gt;CWE-476: NULL Pointer Dereference&lt;/a&gt;
	    </english>
	</metric>
	
	<metric id="2004006" type="quality-rule" originalName="Once memory is applied with malloc, it should be immediately checked whether the pointer value is NULL" section="output">
	    <english>Once memory is applied with malloc, it should be immediately checked whether the pointer value is NULL</english>
    </metric>
	
    <metric id="2004006" type="quality-rule" originalName="Once memory is applied with malloc, it should be immediately checked whether the pointer value is NULL" section="associatedValueName">
	    <english>Once memory is applied with malloc, it should be immediately checked whether the pointer value is NULL</english>
	</metric>
	
	 <metric id="2004006" type="quality-rule" originalName="Once memory is applied with malloc, it should be immediately checked whether the pointer value is NULL" section="total">
		<english>Number of pointers and it's memory allocation</english>
	 </metric>


	 
	 


	<!-- 2004008 :: Set the pointer to NULL immediately after freeing memory with free to prevent "wild Pointers" -->
	<metric id="2004008" type="quality-rule" originalName="Set the pointer to NULL immediately after freeing memory with free to prevent 'Wild Pointers'" section="name">
	    <english>Set the pointer to NULL immediately after freeing memory with free to prevent 'Wild Pointers'</english>
	</metric>
	
	<metric id="2004008" type="quality-rule" originalName="Set the pointer to NULL immediately after freeing memory with free to prevent 'Wild Pointers'" section="rationale">
	    <english>Set the pointer to NULL immediately after freeing memory with free to prevent 'Wild Pointers'</english>
	</metric>
	
	<metric id="2004008" type="quality-rule" originalName="Set the pointer to NULL immediately after freeing memory with free to prevent 'Wild Pointers'" section="description">
	    <english>
	    In this cases, pointers has not been initialized to anything (not even NULL) is known as wild pointer. 
	    The pointer may be initialized to a non-NULL garbage value that may not be a valid address.
	    
		</english>
	</metric>
	
	<metric id="2004008" type="quality-rule" originalName="Set the pointer to NULL immediately after freeing memory with free to prevent 'Wild Pointers'" section="remediation">
	    <english>Wild pointers needs to be freed with free() and then immediately set it to NULL</english>
	</metric>
	
	<metric id="2004008" type="quality-rule" originalName="Set the pointer to NULL immediately after freeing memory with free to prevent 'Wild Pointers'" section="remediationSample">
	    <english>
	    Set the pointer to NULL immediately after freeing memory with free to prevent 'Wild Pointers' fixed.
	          int *ptrFlag; // This is Wild pointer
	          int count = 10;
	          for (int i=0; i&lt;=count; i++)
	          	// process count
	    </english>
	</metric>

	<metric id="2004008" type="quality-rule" originalName="Set the pointer to NULL immediately after freeing memory with free to prevent 'Wild Pointers'" section="sample">
	    <english>

			int *ptrFlag; 
			
			int *ptrFlag = (int *)malloc(sizeof(int));
			// Any statements;
	
			free (ptrFlag);
			
			ptrFlag = NULL; 
     	    
		</english>
	</metric>
	
	<metric id="2004008" type="quality-rule" originalName="Set the pointer to NULL immediately after freeing memory with free to prevent 'Wild Pointers'" section="output">
	    <english>Wild pointer is assigned with proper memory and and released by setting pointer to NULL immediately after freeing memory with free()</english>
    </metric>
	
    <metric id="2004008" type="quality-rule" originalName="Set the pointer to NULL immediately after freeing memory with free to prevent 'Wild Pointers'" section="associatedValueName">
	    <english>Set the pointer to NULL immediately after freeing memory with free to prevent 'Wild Pointers'</english>
	</metric>
		
	 <metric id="2004008" type="quality-rule" originalName="Set the pointer to NULL immediately after freeing memory with free to prevent 'Wild Pointers'" section="total">
		<english>Number of pointers and it's memory allocation</english>
	 </metric>
	 
</root>